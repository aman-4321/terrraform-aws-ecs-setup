name: Deploy to ECR and ECS

on:
  workflow_run:
    workflows: ["Build Next.js Docker Image"]
    types:
      - completed
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: next-app-image
          path: /tmp
        if: github.event_name != 'workflow_dispatch'

      - name: Load Docker image
        run: |
          docker load --input /tmp/next-app-image.tar
        if: github.event_name != 'workflow_dispatch'

      - name: Build image if workflow dispatched
        uses: docker/build-push-action@v4
        with:
          context: ./next-app
          file: ./next-app/Dockerfile
          load: true
          tags: next-app:latest
          build-args: |
            PORT=80
        if: github.event_name == 'workflow_dispatch'

      - name: Tag and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nginx-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag next-app:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag next-app:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Force new deployment
        run: |
          aws ecs update-service --cluster nginx-cluster --service nginx-service --force-new-deployment
